USE curso_sql;

#inserindo valores a tabela funcionarios
INSERT INTO funcionarios (id, nome, salario, departamento) VALUE (1, 'FERNANDO', 1400, 'NARCOTICOS');
INSERT INTO funcionarios (id, nome, salario, departamento) VALUE (2, 'JULIANO', 2500, 'TI');
INSERT INTO funcionarios (nome, salario, departamento) VALUE ('RAFAEL', 1400, 'TI');
INSERT INTO funcionarios (nome, salario, departamento) VALUE ('JOSÉ', 1800, 'ADMINISTRACAO');
INSERT INTO funcionarios (nome, salario, departamento) VALUE ('FERNANDA', 1400, 'NARCOTICOS');


SELECT * FROM funcionarios; #VOLTA TODAS AS INFORMACOES DA TABELA FUNCIONARIOS
SELECT nome FROM funcionarios; #VOLTA OS NOMES DOS FUNCIONARIOS
SELECT nome FROM funcionarios WHERE salario > 1400; #VOLTA OS FUNCIONARIOS QUE TEM SALARIO MAIOR QUE 1400
SELECT * FROM funcionarios WHERE nome = 'JOSÉ'; #VOLTA TODOS OS DADOS DO FUNCIONARIO JOSÉ

UPDATE funcionarios SET salario = salario * 1.1 WHERE id = 1; #ATUALIZA O SALARIO DO PRIMEIRO DA TABELA
SET SQL_SAFE_UPDATES = 0; 
/* O COMANDO ACIMA DESLIGA O SAFE UPDATE DO MYSQL PARA PODER ATUALIZAR TODOS OS SALARIOS DA TABELA,
SET UPDATE É UMA MEDIDA DE SEGURANCA PARA EVITAR ATUALIZACOES NA TABELA INTEIRA SEM O USO DO WHERE,
SO DEVE SER UTILIZADO QUANDO REALMENTE DESEJA ATUALIZAR TODOS OS NUMEROS DE UMA TABELA,
DE CONTRARIO UTILIZAR SEMPRE O WHERE E O ID,
PARA ATIVAR O SAFE UPDATE APOS DESATIVAR-LO DEVE SE UTLIZAR O COMANDO: 
SET SQL_SAFE_UPDATES = 1;
*/
UPDATE funcionarios SET salario = salario * 1.1; #ATUALIZA TODOS OS SALARIOS DA TABELA
SELECT * FROM funcionarios;

UPDATE funcionarios SET salario = ROUND(salario, 2); #ARREDONDA TODOS OS SALARIOS QUEBRADOS
/* O CODIGO ACIMA INFORMA PARA ARRENDONDAR TODOS OS SALARIOS DA TABELA FUNCIONARIOS
E TODOS OS SALARIOS QUE DER NUMEROS COM NO > MAXIMO < 2 PRIMEIRAS CASAS DECIMAIS DIFERENTES DE 00
ELE APRESENTARA O ARREDONDAMENTO DELAS, OU SEJA: 1.83 = 1.8, OU 1.8976 = 1.90
E ASSIM POR DIANTE
*/
SELECT * FROM funcionarios;

DELETE FROM funcionarios WHERE id = 4; #DELETA DA TABELA FUNCIONARIOS O FUNCIONARIO QUE TEM ID 4;
SELECT * FROM funcionarios;

INSERT INTO veiculos (funcionario_id, veiculo, placa) VALUES (1, 'CARRO', 'SB-0001'); 
#ADICIONA UM CARRO AO FUNCIONARIO COM ID = 1
INSERT INTO veiculos (funcionario_id, veiculo, placa) VALUES (1, 'CARRO', 'SB-0002');
#ADICIONA UM NOVO CARRO AO FUNCIONARIO COM ID = 1
INSERT INTO veiculos (funcionario_id, veiculo, placa) VALUES (5, 'MOTO', 'SB-0003');
SELECT * FROM veiculos; 

UPDATE veiculos SET funcionario_id = 3 WHERE id = 2;
#PASSO O SEGUNDO AUTOMOVEL DO ID = 1 (FERNANDO) PARA O ID = 3 (RAFAEL)
SELECT * FROM veiculos; 

INSERT INTO salarios (faixa, inicio, fim) VALUES ('Analista JR', 1000, 2000);
INSERT INTO salarios (faixa, inicio, fim) VALUES ('Analista Pleno', 2000, 4000);
INSERT INTO salarios (faixa, inicio, fim) VALUES ('Estágiario', 1500, 2700);
INSERT INTO salarios (faixa, inicio, fim) VALUES ('Gerente de TI', 5000, 8000);
SELECT * FROM salarios;

SELECT * FROM funcionarios f WHERE salario > 1400;
#APELIDA A TABELA FUNCIONARIOS DE "F" E ME VOLTA OS DADOS DAS PESSOAS COM OS SALARIOS ACIMA DE 1400
SELECT id, nome, salario FROM funcionarios WHERE id > 1;
#ME VOLTA OS NOMES O ID E OS SALARIOS DOS FUNCIONARIOS QUE TEM O ID MAIOR QUE 1;

SELECT id AS 'Identificacao', nome AS 'Funcionario', salario AS 'Salário' FROM funcionarios WHERE id > 1;
#MUDANDO OS NOMES DE CADA CAMPO DA TABELA PARA FICAR COM UMA MELHOR ESTETICA (APELIDO EM CAMPOS)

SELECT * FROM funcionarios WHERE nome = 'RAFAEL' UNION SELECT * FROM funcionarios WHERE id = 5;
#UNINDO DUAS CONSULTAS E MOSTRANDOS OS 2 DADOS DOS FUNCIONARIOS QUE TEM POR NOME RAFAEL E POR ID - 5

SELECT * FROM funcionarios WHERE nome = 'RAFAEL' UNION SELECT * FROM funcionarios WHERE id = 3;
/*A UNION VOLTA SOMENTE O NOME RAFAEL, PORQUE EU PEDI PARA ELE VOLTAR QUEM TEM O ID = 3 E QUEM TEM O NOME RAFAEL, E ISSO É SOMENTE 1 PESSOA,
NAO ME VOLTANDO REGISTROS DUPLICADOS
*/
SELECT * FROM funcionarios WHERE nome = 'RAFAEL' UNION ALL SELECT * FROM funcionarios WHERE id = 3;
#JA O UNCION ALL ME VOLTA AMBAS PESQUISAS MESMO SE AMBAS FOREM A MESMA PESSOA